{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthGuard {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    const token = this.authService.getToken();\n    if (token && this.authService.decodeToken(token) !== null && this.authService.decodeToken(token).exp > Date.now() / 1000) {\n      return true;\n    }\n    this.authService.logout();\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAaA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAE3B;EAEJC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAM1B,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,IACED,KAAK,IACL,IAAI,CAACJ,WAAW,CAACM,WAAW,CAACF,KAAK,CAAC,KAAK,IAAI,IAC5C,IAAI,CAACJ,WAAW,CAACM,WAAW,CAACF,KAAK,CAAC,CAACG,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAC3D;MACA,OAAO,IAAI;;IAGb,IAAI,CAACT,WAAW,CAACU,MAAM,EAAE;IACzB,OAAO,KAAK;EACd;;AAxBWZ,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAa,SAATb,SAAS;EAAAc,YAFR;AAAM","names":["AuthGuard","constructor","authService","canActivate","route","state","token","getToken","decodeToken","exp","Date","now","logout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\services\\guard\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService\n    ,\n  ) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const token = this.authService.getToken();\n    if (\n      token &&\n      this.authService.decodeToken(token) !== null &&\n      this.authService.decodeToken(token).exp > Date.now() / 1000\n    ) {\n      return true;\n    }\n\n    this.authService.logout();\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}