{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/SoundIt/Desktop/Development/unighana-test/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MustMatch } from './MustMatch';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.user = {\n      email: '',\n      password: '',\n      _id: '',\n      username: '',\n      createdAt: '',\n      updatedAt: ''\n    };\n    this.showPassword = false;\n    this.registerForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/)]),\n      confirmPassword: new FormControl('', [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: MustMatch('password', 'confirmPassword')\n    });\n  }\n  onSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.user = _this.registerForm.value;\n      yield _this.authService.register(_this.user);\n      _this.registerForm.reset();\n      // close the modal\n      _this.registerModal.nativeElement.click();\n    })();\n  }\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n  get username() {\n    return this.registerForm.get('username');\n  }\n  get email() {\n    return this.registerForm.get('email');\n  }\n  get password() {\n    return this.registerForm.get('password');\n  }\n  get confirmPassword() {\n    return this.registerForm.get('confirmPassword');\n  }\n};\n__decorate([ViewChild('registerModal')], RegisterComponent.prototype, \"registerModal\", void 0);\nRegisterComponent = __decorate([Component({\n  selector: 'register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,EAAEC,SAAS,QAAQ,eAAe;AACpD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAGnE,SAASC,SAAS,QAAQ,aAAa;AAOhC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAqC5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IApC/B,SAAI,GAAS;MACXC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,GAAG,EAAE,EAAE;MACPC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE;KACZ;IAED,iBAAY,GAAG,KAAK;IAEpB,iBAAY,GAAc,IAAIX,SAAS,CACrC;MACES,QAAQ,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACW,QAAQ,CAAC,CAAC;MACpDN,KAAK,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACK,KAAK,CAAC,CAAC;MACnEC,QAAQ,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAC5BE,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,EACvBZ,UAAU,CAACa,OAAO,CAChB,gEAAgE,CACjE,CACF,CAAC;MACFC,eAAe,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAE,CACnCE,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,CACxB;KACF,EACD;MACEG,UAAU,EAAEd,SAAS,CAAC,UAAU,EAAE,iBAAiB;KACpD,CACF;EAM8C;EAEzCe,QAAQ;IAAA;IAAA;MACZ,KAAI,CAACC,IAAI,GAAG,KAAI,CAACC,YAAY,CAACC,KAAK;MACnC,MAAM,KAAI,CAACf,WAAW,CAACgB,QAAQ,CAAC,KAAI,CAACH,IAAI,CAAC;MAC1C,KAAI,CAACC,YAAY,CAACG,KAAK,EAAE;MACzB;MACA,KAAI,CAACC,aAAa,CAACC,aAAa,CAACC,KAAK,EAAE;IAAC;EAC3C;EAEAC,wBAAwB;IACtB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEA,IAAIlB,QAAQ;IACV,OAAO,IAAI,CAACU,YAAY,CAACS,GAAG,CAAC,UAAU,CAAgB;EACzD;EAEA,IAAItB,KAAK;IACP,OAAO,IAAI,CAACa,YAAY,CAACS,GAAG,CAAC,OAAO,CAAgB;EACtD;EAEA,IAAIrB,QAAQ;IACV,OAAO,IAAI,CAACY,YAAY,CAACS,GAAG,CAAC,UAAU,CAAgB;EACzD;EAEA,IAAIb,eAAe;IACjB,OAAO,IAAI,CAACI,YAAY,CAACS,GAAG,CAAC,iBAAiB,CAAgB;EAChE;CACD;AAhC6BC,YAA3B/B,SAAS,CAAC,eAAe,CAAC,wDAAoB;AAlCpCK,iBAAiB,eAL7BN,SAAS,CAAC;EACTiC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW7B,iBAAiB,CAkE7B;SAlEYA,iBAAiB","names":["Component","ViewChild","FormControl","FormGroup","Validators","MustMatch","RegisterComponent","constructor","authService","email","password","_id","username","createdAt","updatedAt","required","minLength","pattern","confirmPassword","validators","onSubmit","user","registerForm","value","register","reset","registerModal","nativeElement","click","togglePasswordVisibility","showPassword","get","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\components\\modals\\register\\register.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from 'src/app/interfaces/user';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { MustMatch } from './MustMatch';\n\n@Component({\n  selector: 'register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent {\n  user: User = {\n    email: '',\n    password: '',\n    _id: '',\n    username: '',\n    createdAt: '',\n    updatedAt: '',\n  };\n\n  showPassword = false;\n\n  registerForm: FormGroup = new FormGroup(\n    {\n      username: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(\n          /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/\n        ),\n      ]),\n      confirmPassword: new FormControl('', [\n        Validators.required,\n        Validators.minLength(8),\n      ]),\n    },\n    {\n      validators: MustMatch('password', 'confirmPassword'),\n    }\n  );\n\n  // Get modal\n  @ViewChild('registerModal') registerModal: any;\n\n\n  constructor(private authService: AuthService) {}\n\n  async onSubmit() {\n    this.user = this.registerForm.value;\n    await this.authService.register(this.user);\n    this.registerForm.reset();\n    // close the modal\n    this.registerModal.nativeElement.click();\n  }\n\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n\n  get username() {\n    return this.registerForm.get('username') as FormControl;\n  }\n\n  get email() {\n    return this.registerForm.get('email') as FormControl;\n  }\n\n  get password() {\n    return this.registerForm.get('password') as FormControl;\n  }\n\n  get confirmPassword() {\n    return this.registerForm.get('confirmPassword') as FormControl;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}