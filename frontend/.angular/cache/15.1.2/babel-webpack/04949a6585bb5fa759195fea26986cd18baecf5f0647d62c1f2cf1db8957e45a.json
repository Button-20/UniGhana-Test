{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    this.authService.getToken().then(token => {\n      if (token) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    });\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EACjCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE,CAACC,IAAI,CAAEC,KAAK,IAAI;MACzC,IAAIA,KAAK,EAAE;QACTJ,GAAG,GAAGA,GAAG,CAACK,KAAK,CAAC;UACdC,UAAU,EAAE;YAAEC,aAAa,EAAE,UAAUH,KAAK;UAAE;SAC/C,CAAC;;IAER,CAAC;EACH;;AAdaR,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAY,SAAtBZ,sBAAsB;EAAAa,YAFrB;AAAM","names":["AuthInterceptorService","constructor","authService","intercept","req","next","getToken","then","token","clone","setHeaders","Authorization","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\services\\interceptors\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthInterceptorService {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    this.authService.getToken().then((token) => {\r\n      if (token) {\r\n        req = req.clone({\r\n          setHeaders: { Authorization: `Bearer ${token}` },\r\n        });\r\n      } \r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}