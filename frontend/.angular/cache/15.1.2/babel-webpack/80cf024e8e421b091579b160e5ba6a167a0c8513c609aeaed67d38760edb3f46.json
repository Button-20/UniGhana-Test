{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/SoundIt/Desktop/Development/unighana-test/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class AuthService {\n  constructor(http, toastr) {\n    this.http = http;\n    this.toastr = toastr;\n    this.BaseURL = 'http://localhost:4000/api/';\n    this.user = {\n      email: '',\n      password: '',\n      _id: '',\n      username: '',\n      createdAt: '',\n      updatedAt: ''\n    };\n  }\n  login(user) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log(user);\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this.http.post(_this.BaseURL + 'login', user).subscribe(response => {\n              if (response.message) {\n                _this.toastr.success(response.message);\n                _this.saveToken(response.token);\n              }\n              resolve(response);\n            }, error => {\n              _this.toastr.error(error.error.message);\n              reject(error);\n            });\n          } catch (error) {\n            reject(error);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  register(user) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this2.http.post(_this2.BaseURL + 'register', user).subscribe(response => {\n              if (response.message) {\n                _this2.toastr.success(response.message);\n              }\n              resolve(response);\n            }, error => {\n              _this2.toastr.error(error.error.message);\n              reject(error);\n            });\n          } catch (error) {\n            reject(error);\n          }\n        });\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  getUserDetails() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this3.http.get(_this3.BaseURL + 'user').subscribe(response => {\n              _this3.user = response.user;\n              resolve(response);\n            }, error => {\n              _this3.toastr.error(error.error.message);\n              reject(error);\n            });\n          } catch (error) {\n            reject(error);\n          }\n        });\n        return function (_x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  isLoggedIn() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            const token = yield _this4.getToken();\n            console.log('token', token);\n            if (!token) {\n              resolve(false);\n            }\n            resolve(token);\n          } catch (error) {\n            reject(error);\n          }\n        });\n        return function (_x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  saveToken(token) {\n    crypto.subtle.digest('SHA-256', new TextEncoder().encode(token)).then(hash => {\n      localStorage.setItem('token', btoa(String.fromCharCode(...new Uint8Array(hash))));\n    });\n  }\n  getToken() {\n    return _asyncToGenerator(function* () {\n      const hash = yield crypto.subtle.digest('SHA-256', new TextEncoder().encode(localStorage.getItem('token')));\n      return btoa(String.fromCharCode(...new Uint8Array(hash)));\n    })();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["AuthService","constructor","http","toastr","email","password","_id","username","createdAt","updatedAt","login","user","console","log","Promise","resolve","reject","post","BaseURL","subscribe","response","message","success","saveToken","token","error","register","getUserDetails","get","isLoggedIn","getToken","logout","localStorage","removeItem","crypto","subtle","digest","TextEncoder","encode","then","hash","setItem","btoa","String","fromCharCode","Uint8Array","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { User } from '../interfaces/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  BaseURL = 'http://localhost:4000/api/';\n  user: User = {\n    email: '',\n    password: '',\n    _id: '',\n    username: '',\n    createdAt: '',\n    updatedAt: '',\n  };\n\n  constructor(private http: HttpClient, private toastr: ToastrService) {}\n\n  async login(user: User) {\n    console.log(user\n    return await new Promise(async (resolve, reject) => {\n      try {\n        this.http.post(this.BaseURL + 'login', user).subscribe(\n          (response: any) => {\n            if (response.message) {\n              this.toastr.success(response.message);\n              this.saveToken(response.token);\n            }\n\n            resolve(response);\n          },\n          (error) => {\n            this.toastr.error(error.error.message);\n            reject(error);\n          }\n        );\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async register(user: User) {\n    return await new Promise(async (resolve, reject) => {\n      try {\n        this.http.post(this.BaseURL + 'register', user).subscribe(\n          (response: any) => {\n            if (response.message) {\n              this.toastr.success(response.message);\n            }\n            resolve(response);\n          },\n          (error) => {\n            this.toastr.error(error.error.message);\n            reject(error);\n          }\n        );\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getUserDetails() {\n    return await new Promise(async (resolve, reject) => {\n      try {\n        this.http.get(this.BaseURL + 'user').subscribe(\n          (response: any) => {\n            this.user = response.user;\n            resolve(response);\n          },\n          (error) => {\n            this.toastr.error(error.error.message);\n            reject(error);\n          }\n        );\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async isLoggedIn() {\n    return await new Promise(async (resolve, reject) => {\n      try {\n        const token = await this.getToken();\n        console.log('token', token);\n        if (!token) {\n          resolve(false);\n        }\n        resolve(token);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  saveToken(token: string) {\n    crypto.subtle\n      .digest('SHA-256', new TextEncoder().encode(token))\n      .then((hash) => {\n        localStorage.setItem(\n          'token',\n          btoa(String.fromCharCode(...new Uint8Array(hash)))\n        );\n      });\n  }\n\n  async getToken() {\n    const hash = await crypto.subtle\n      .digest(\n        'SHA-256',\n        new TextEncoder().encode(localStorage.getItem('token') as string)\n      );\n    return btoa(String.fromCharCode(...new Uint8Array(hash)));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}