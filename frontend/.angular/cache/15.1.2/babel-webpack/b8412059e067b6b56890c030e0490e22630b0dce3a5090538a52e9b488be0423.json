{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = this.authService.getToken();\n    console;\n    if (token) {\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer ' + token)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EACjCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzCC,OAAO;IACP,IAAIF,KAAK,EAAE;MACT,MAAMG,MAAM,GAAGL,GAAG,CAACM,KAAK,CAAC;QACvBC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGN,KAAK;OAC5D,CAAC;MACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC;KAC3B,MAAM;MACL,OAAOJ,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;;EAE3B;;AAjBWJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAc,SAAtBd,sBAAsB;EAAAe,YAFrB;AAAM","names":["AuthInterceptorService","constructor","authService","intercept","req","next","token","getToken","console","cloned","clone","headers","set","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\services\\interceptors\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthInterceptorService {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = this.authService.getToken();\r\n    console\r\n    if (token) {\r\n      const cloned = req.clone({\r\n        headers: req.headers.set('Authorization', 'Bearer ' + token),\r\n      });\r\n      return next.handle(cloned);\r\n    } else {\r\n      return next.handle(req);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}