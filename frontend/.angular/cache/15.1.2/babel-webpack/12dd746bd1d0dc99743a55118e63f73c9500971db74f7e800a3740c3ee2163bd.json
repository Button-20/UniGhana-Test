{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.user = {\n      email: '',\n      password: '',\n      _id: '',\n      username: '',\n      createdAt: '',\n      updatedAt: ''\n    };\n    this.registerForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8)]),\n      confirmPassword: new FormControl('', [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: this.checkPasswords\n    });\n  }\n  onSubmit() {\n    this.user = this.registerForm.value;\n    this.authService.register(this.user);\n  }\n  get username() {\n    return this.registerForm.get('username');\n  }\n  get email() {\n    return this.registerForm.get('email');\n  }\n  get password() {\n    return this.registerForm.get('password');\n  }\n  get confirmPassword() {\n    return this.registerForm.get('confirmPassword');\n  }\n  checkPasswords(group) {\n    const pass = group.get('password')?.value;\n    const confirmPass = group.get('confirmPassword')?.value;\n    return pass === confirmPass ? null : {\n      notSame: true\n    };\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAEEC,WAAW,EACXC,SAAS,EACTC,UAAU,QACL,gBAAgB;AAShB,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EA0B5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAzB/B,SAAI,GAAS;MACXC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,GAAG,EAAE,EAAE;MACPC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE;KACZ;IAED,iBAAY,GAAc,IAAIV,SAAS,CACrC;MACEQ,QAAQ,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACU,QAAQ,CAAC,CAAC;MACpDN,KAAK,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACI,KAAK,CAAC,CAAC;MACnEC,QAAQ,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAC5BE,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,eAAe,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CACnCE,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,CACxB;KACF,EACD;MAAEE,UAAU,EAAE,IAAI,CAACC;IAAqB,CAAE,CAC3C;EAE8C;EAE/CC,QAAQ;IACN,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,YAAY,CAACC,KAAK;IACnC,IAAI,CAACf,WAAW,CAACgB,QAAQ,CAAC,IAAI,CAACH,IAAI,CAAC;EACtC;EAEA,IAAIT,QAAQ;IACV,OAAO,IAAI,CAACU,YAAY,CAACG,GAAG,CAAC,UAAU,CAAgB;EACzD;EAEA,IAAIhB,KAAK;IACP,OAAO,IAAI,CAACa,YAAY,CAACG,GAAG,CAAC,OAAO,CAAgB;EACtD;EAEA,IAAIf,QAAQ;IACV,OAAO,IAAI,CAACY,YAAY,CAACG,GAAG,CAAC,UAAU,CAAgB;EACzD;EAEA,IAAIR,eAAe;IACjB,OAAO,IAAI,CAACK,YAAY,CAACG,GAAG,CAAC,iBAAiB,CAAgB;EAChE;EAEAN,cAAc,CAACO,KAAgB;IAC7B,MAAMC,IAAI,GAAGD,KAAK,CAACD,GAAG,CAAC,UAAU,CAAC,EAAEF,KAAK;IACzC,MAAMK,WAAW,GAAGF,KAAK,CAACD,GAAG,CAAC,iBAAiB,CAAC,EAAEF,KAAK;IAEvD,OAAOI,IAAI,KAAKC,WAAW,GACvB,IAAI,GACH;MAAEC,OAAO,EAAE;IAAI,CAA6B;EACnD;CACD;AAzDYvB,iBAAiB,eAL7BJ,SAAS,CAAC;EACT4B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW1B,iBAAiB,CAyD7B;SAzDYA,iBAAiB","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","authService","email","password","_id","username","createdAt","updatedAt","required","minLength","confirmPassword","validators","checkPasswords","onSubmit","user","registerForm","value","register","get","group","pass","confirmPass","notSame","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\components\\modals\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n  AbstractControlOptions,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { User } from 'src/app/interfaces/user';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent {\n  user: User = {\n    email: '',\n    password: '',\n    _id: '',\n    username: '',\n    createdAt: '',\n    updatedAt: '',\n  };\n\n  registerForm: FormGroup = new FormGroup(\n    {\n      username: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(8),\n      ]),\n      confirmPassword: new FormControl('', [\n        Validators.required,\n        Validators.minLength(8),\n      ]),\n    },\n    { validators: this.checkPasswords as any }\n  );\n\n  constructor(private authService: AuthService) {}\n\n  onSubmit() {\n    this.user = this.registerForm.value;\n    this.authService.register(this.user);\n  }\n\n  get username() {\n    return this.registerForm.get('username') as FormControl;\n  }\n\n  get email() {\n    return this.registerForm.get('email') as FormControl;\n  }\n\n  get password() {\n    return this.registerForm.get('password') as FormControl;\n  }\n\n  get confirmPassword() {\n    return this.registerForm.get('confirmPassword') as FormControl;\n  }\n\n  checkPasswords(group: FormGroup): AbstractControlOptions | null {\n    const pass = group.get('password')?.value;\n    const confirmPass = group.get('confirmPassword')?.value;\n\n    return pass === confirmPass\n      ? null\n      : ({ notSame: true } as AbstractControlOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}