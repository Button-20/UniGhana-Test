{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/SoundIt/Desktop/Development/unighana-test/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const token = yield _this.authService.getToken();\n      const authReq = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(authReq);\n      // return next.handle(req);\n      return next.handle(req).pipe(catchError(error => {\n        if (error.status === 401) {\n          // 401 handled in auth.interceptor\n          return throwError(error);\n        } else if (error.status === 403) {\n          // 403 handled in auth.interceptor \n          return throwError(error);\n        } else {\n          return throwError(error);\n        }\n      }));\n    })();\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,sBAAsB;EACjCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAEzCC,SAAS,CACbC,GAAqB,EACrBC,IAAiB;IAAA;IAAA;MAGjB,MAAMC,KAAK,SAAS,KAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;MAC/C,MAAMC,OAAO,GAAGJ,GAAG,CAACK,KAAK,CAAC;QACxBC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAC5D,CAAC;MACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,OAAO,CAAC;MAE3B;MAEA,OAAOH,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC,CAACS,IAAI,CAC1BC,UAAU,CAAEC,KAAwB,IAAI;QACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UACxB;UACA,OAAOC,UAAU,CAACF,KAAK,CAAC;SACzB,MAAO,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UAChC;UACA,OAAOC,UAAU,CAACF,KAAK,CAAC;SACzB,MAAM;UACL,OAAOE,UAAU,CAACF,KAAK,CAAC;;MAE5B,CAAC,CAAC,CACH;IAAC;EACJ;;AA7BWf,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAkB,SAAtBlB,sBAAsB;EAAAmB,YAFrB;AAAM","names":["AuthInterceptorService","constructor","authService","intercept","req","next","token","getToken","authReq","clone","headers","set","handle","pipe","catchError","error","status","throwError","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\services\\interceptors\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthInterceptorService {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  async intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Promise<Observable<HttpEvent<any>>>\r\n  {\r\n    const token = await this.authService.getToken();\r\n    const authReq = req.clone({\r\n      headers: req.headers.set('Authorization', `Bearer ${token}`),\r\n    });\r\n    return next.handle(authReq);\r\n\r\n    // return next.handle(req);\r\n\r\n    return next.handle(req).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        if (error.status === 401) {\r\n          // 401 handled in auth.interceptor\r\n          return throwError(error);\r\n        }  else if (error.status === 403) {\r\n          // 403 handled in auth.interceptor \r\n          return throwError(error);  \r\n        } else {\r\n          return throwError(error);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}