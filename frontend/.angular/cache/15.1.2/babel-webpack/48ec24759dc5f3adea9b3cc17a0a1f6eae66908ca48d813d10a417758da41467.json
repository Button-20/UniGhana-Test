{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/SoundIt/Desktop/Development/unighana-test/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nexport class AuthInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  // Async function to intercept the request and add the token to the header\n  intercept(req, next) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Get the token from the local storage\n      const token = yield _this.authService.getToken();\n      con;\n      // If there is a token, clone the request and add the token to the header\n      if (token) {\n        const cloned = req.clone({\n          headers: req.headers.set('Authorization', 'Bearer ' + token)\n        });\n        return next.handle(cloned);\n      } else {\n        return next.handle(req);\n      }\n    })();\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,sBAAsB;EACjCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/C;EACMC,SAAS,CACbC,GAAqB,EACrBC,IAAiB;IAAA;IAAA;MAEjB;MACA,MAAMC,KAAK,SAAU,KAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;MAChDC,GAAG;MACH;MACA,IAAIF,KAAK,EAAE;QACT,MAAMG,MAAM,GAAGL,GAAG,CAACM,KAAK,CAAC;UACvBC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGN,KAAK;SAC5D,CAAC;QAEF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC;OAC3B,MAAM;QACL,OAAOJ,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;;IACxB;EACH;;AArBWJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAc,SAAtBd,sBAAsB;EAAAe,YAFrB;AAAM","names":["AuthInterceptorService","constructor","authService","intercept","req","next","token","getToken","con","cloned","clone","headers","set","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SoundIt\\Desktop\\Development\\unighana-test\\frontend\\src\\app\\services\\interceptors\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthInterceptorService {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  // Async function to intercept the request and add the token to the header\r\n  async intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Promise<Observable<HttpEvent<any>>> {\r\n    // Get the token from the local storage\r\n    const token =  await this.authService.getToken();\r\n    con\r\n    // If there is a token, clone the request and add the token to the header\r\n    if (token) {\r\n      const cloned = req.clone({\r\n        headers: req.headers.set('Authorization', 'Bearer ' + token),\r\n      });\r\n\r\n      return next.handle(cloned);\r\n    } else {\r\n      return next.handle(req);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}